generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String?
  name          String
  avatar        String?
  roleId        String
  role          Role      @relation(fields: [roleId], references: [id])
  status        UserStatus @default(PENDING)
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLogin     DateTime?
  invitedBy     String?
  invitedByUser User?     @relation("UserInvites", fields: [invitedBy], references: [id])
  invitedUsers  User[]    @relation("UserInvites")
  
  sessions      Session[]
  accounts      Account[]
  activities    Activity[]
  
  @@index([email])
  @@index([roleId])
  @@index([status])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @ignore
  access_token      String? @ignore
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  displayName String
  description String?
  permissions Permission[]
  users       User[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  @@index([name])
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  roles       Role[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Activity {
  id          String       @id @default(cuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        ActivityType
  action      String
  details     String?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime     @default(now())
  
  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
  DELETED
}

enum ActivityType {
  AUTH_LOGIN
  AUTH_LOGOUT
  AUTH_FAILED
  USER_CREATED
  USER_UPDATED
  USER_DELETED
  PASSWORD_CHANGED
  PASSWORD_RESET
  ROLE_CHANGED
  PERMISSION_CHANGED
}
